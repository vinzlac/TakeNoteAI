#!/usr/bin/env python3
"""
Script de nettoyage audio - Nettoie les fichiers audio pour am√©liorer la transcription
en supprimant le bruit, normalisant le volume et optimisant la qualit√©.
"""

import os
import sys
import argparse
import subprocess
from pathlib import Path


def clean_audio(input_path, output_path=None, noise_reduction=True, normalize=True):
    """
    Nettoie un fichier audio pour optimiser la transcription Whisper.
    
    Args:
        input_path (str): Chemin vers le fichier audio d'entr√©e
        output_path (str, optional): Chemin de sortie. Si None, g√©n√®re automatiquement
        noise_reduction (bool): Appliquer la r√©duction de bruit
        normalize (bool): Normaliser le volume
    
    Returns:
        str: Chemin du fichier de sortie
    """
    input_path = Path(input_path)
    
    if not input_path.exists():
        raise FileNotFoundError(f"Le fichier {input_path} n'existe pas")
    
    # G√©n√©ration du nom de sortie si non fourni
    if output_path is None:
        output_path = input_path.parent / f"{input_path.stem}_cleaned.mp3"
    else:
        output_path = Path(output_path)
    
    try:
        # Construction de la commande FFmpeg
        cmd = [
            'ffmpeg',
            '-i', str(input_path),
            '-y'  # Overwrite output
        ]
        
        # Filtres de nettoyage
        filters = []
        
        # Filtres de base pour la parole (toujours appliqu√©s)
        filters.extend([
            "highpass=f=80",  # Filtre passe-haut pour √©liminer les basses fr√©quences
            "lowpass=f=8000",  # Filtre passe-bas pour √©liminer les hautes fr√©quences
        ])
        
        # R√©duction de bruit (si activ√©e)
        if noise_reduction:
            filters.append("anlmdn=s=0.0001:p=0.02")  # R√©duction de bruit non-locale
        
        # Normalisation du volume (si activ√©e)
        if normalize:
            filters.append("volume=2.0")  # Normalisation simple
        
        # Ajouter les filtres √† la commande
        if filters:
            cmd.extend(['-af', ','.join(filters)])
        
        # Configuration de sortie optimis√©e pour Whisper
        cmd.extend([
            '-acodec', 'mp3',
            '-ac', '1',  # Mono
            '-ar', '16000',  # 16kHz optimal pour Whisper
            '-ab', '64k',  # Bitrate r√©duit mais suffisant
            '-q:a', '2',
            str(output_path)
        ])
        
        # Ex√©cution de la commande
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode != 0:
            print(f"‚ùå Erreur FFmpeg: {result.stderr}")
            raise subprocess.CalledProcessError(result.returncode, cmd, result.stderr)
        
        print(f"‚úÖ Nettoyage r√©ussi: {input_path.name} -> {output_path.name}")
        return str(output_path)
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors du nettoyage: {e}")
        raise
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
        raise


def analyze_audio(input_path):
    """
    Analyse un fichier audio pour diagnostiquer les probl√®mes potentiels.
    
    Args:
        input_path (str): Chemin vers le fichier audio
    """
    input_path = Path(input_path)
    
    if not input_path.exists():
        raise FileNotFoundError(f"Le fichier {input_path} n'existe pas")
    
    try:
        # R√©cup√©ration des informations du fichier avec ffprobe
        cmd = ['ffprobe', '-v', 'quiet', '-print_format', 'json', '-show_format', '-show_streams', str(input_path)]
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode != 0:
            print(f"‚ùå Erreur lors de l'analyse: {result.stderr}")
            return
        
        import json
        probe = json.loads(result.stdout)
        audio_stream = next((stream for stream in probe['streams'] if stream['codec_type'] == 'audio'), None)
        
        if not audio_stream:
            print("‚ùå Aucun flux audio trouv√© dans le fichier")
            return
        
        print(f"üìä Analyse du fichier: {input_path.name}")
        print(f"   Format: {audio_stream.get('codec_name', 'Inconnu')}")
        print(f"   Dur√©e: {float(probe['format']['duration']):.2f} secondes")
        print(f"   Taille: {int(probe['format']['size']) / 1024 / 1024:.2f} MB")
        print(f"   Sample rate: {audio_stream.get('sample_rate', 'Inconnu')} Hz")
        print(f"   Canaux: {audio_stream.get('channels', 'Inconnu')}")
        print(f"   Bitrate: {audio_stream.get('bit_rate', 'Inconnu')} bps")
        
        # Recommandations
        sample_rate = int(audio_stream.get('sample_rate', 0))
        channels = int(audio_stream.get('channels', 0))
        
        recommendations = []
        if sample_rate < 16000:
            recommendations.append("Sample rate trop bas (< 16kHz)")
        if channels > 1:
            recommendations.append("Fichier st√©r√©o - conversion en mono recommand√©e")
        if int(audio_stream.get('bit_rate', 0)) < 64000:
            recommendations.append("Bitrate faible - qualit√© audio potentiellement d√©grad√©e")
        
        if recommendations:
            print("‚ö†Ô∏è  Recommandations:")
            for rec in recommendations:
                print(f"   - {rec}")
        else:
            print("‚úÖ Fichier audio de bonne qualit√©")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de l'analyse: {e}")


def main():
    parser = argparse.ArgumentParser(description="Nettoie les fichiers audio pour optimiser la transcription")
    parser.add_argument("input", help="Fichier audio d'entr√©e")
    parser.add_argument("-o", "--output", help="Fichier de sortie (optionnel)")
    parser.add_argument("--no-noise-reduction", action="store_true", 
                       help="D√©sactiver la r√©duction de bruit")
    parser.add_argument("--no-normalize", action="store_true", 
                       help="D√©sactiver la normalisation du volume")
    parser.add_argument("--analyze", action="store_true", 
                       help="Analyser le fichier sans le nettoyer")
    
    args = parser.parse_args()
    
    try:
        if args.analyze:
            analyze_audio(args.input)
        else:
            output_file = clean_audio(
                args.input, 
                args.output, 
                noise_reduction=not args.no_noise_reduction,
                normalize=not args.no_normalize
            )
            print(f"üìÅ Fichier nettoy√© sauvegard√©: {output_file}")
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()

