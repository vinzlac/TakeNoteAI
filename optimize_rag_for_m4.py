#!/usr/bin/env python3
"""
Script d'optimisation des scripts RAG pour Mac M4
"""

import torch
import os
import shutil
from pathlib import Path

def optimize_rag_scripts():
    """Optimise les scripts RAG pour Mac M4."""
    print("üöÄ Optimisation des scripts RAG pour Mac M4...")
    print("=" * 60)
    
    # V√©rifier MPS
    if not torch.backends.mps.is_available():
        print("‚ùå MPS non disponible sur ce syst√®me")
        return False
    
    print("‚úÖ MPS disponible - Optimisations activ√©es")
    
    # Optimisations PyTorch
    # torch.backends.mps.enable_amp()  # Non disponible dans cette version
    torch.set_num_threads(14)  # Tous les c≈ìurs M4
    
    # Variables d'environnement
    os.environ['OMP_NUM_THREADS'] = '14'
    os.environ['MKL_NUM_THREADS'] = '14'
    os.environ['NUMEXPR_NUM_THREADS'] = '14'
    
    print("‚úÖ Configuration PyTorch optimis√©e")
    
    # Optimiser advanced_rag_transcription.py
    optimize_main_script()
    
    # Optimiser les scripts d'analyse
    optimize_analysis_scripts()
    
    print("\nüéâ Optimisation termin√©e!")
    print("üìà Vos scripts RAG sont maintenant optimis√©s pour Mac M4")
    
    return True

def optimize_main_script():
    """Optimise advanced_rag_transcription.py."""
    print("\nüîß Optimisation de advanced_rag_transcription.py...")
    
    script_path = Path("advanced_rag_transcription.py")
    if not script_path.exists():
        print("‚ùå Script advanced_rag_transcription.py introuvable")
        return
    
    # Sauvegarder l'original
    backup_path = script_path.with_suffix('.py.backup')
    if not backup_path.exists():
        shutil.copy2(script_path, backup_path)
        print(f"‚úÖ Sauvegarde cr√©√©e: {backup_path}")
    
    # Lire le script
    with open(script_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Optimisations √† appliquer
    optimizations = [
        # Ajouter les imports optimis√©s
        ("import warnings", """import warnings
import torch
import os

# Optimisations M4
if torch.backends.mps.is_available():
    torch.set_num_threads(14)
    os.environ['OMP_NUM_THREADS'] = '14'
    os.environ['MKL_NUM_THREADS'] = '14'
    os.environ['NUMEXPR_NUM_THREADS'] = '14'
    print("üöÄ Optimisations M4 activ√©es")
"""),
        
        # Optimiser la d√©tection de device
        ('self.device = "cpu"', '''self.device = self._get_optimal_device()
        print(f"üéØ Device s√©lectionn√©: {self.device}")'''),
        
        # Ajouter la m√©thode de d√©tection de device
        ('def __init__(self', '''def _get_optimal_device(self):
        """D√©tecte le device optimal pour M4."""
        if torch.backends.mps.is_available():
            print("‚úÖ GPU M4 d√©tect√© via MPS")
            return "mps"
        elif torch.cuda.is_available():
            print("‚úÖ GPU CUDA d√©tect√©")
            return "cuda"
        else:
            print("‚ö†Ô∏è  Utilisation CPU uniquement")
            return "cpu"
    
    def __init__(self'''),
        
        # Optimiser le chargement des mod√®les
        ('whisper.load_model("base", device=self.device)', '''whisper.load_model("base", device=self.device)
            
            # Optimisations M4
            if self.device == "mps":
                print("üöÄ Optimisations M4 appliqu√©es au mod√®le Whisper")
                # Mixed precision pour MPS
                if hasattr(self.asr_model, 'half'):
                    self.asr_model.half()'''),
    ]
    
    # Appliquer les optimisations
    modified = False
    for old, new in optimizations:
        if old in content and new not in content:
            content = content.replace(old, new)
            modified = True
    
    if modified:
        # Sauvegarder le script optimis√©
        with open(script_path, 'w', encoding='utf-8') as f:
            f.write(content)
        print("‚úÖ Script advanced_rag_transcription.py optimis√©")
    else:
        print("‚ÑπÔ∏è  Script d√©j√† optimis√©")

def optimize_analysis_scripts():
    """Optimise les scripts d'analyse."""
    print("\nüîß Optimisation des scripts d'analyse...")
    
    scripts_to_optimize = [
        "simple_audio_analyzer.py",
        "audio_summarizer.py",
        "generate_keywords_from_transcription.py"
    ]
    
    for script_name in scripts_to_optimize:
        script_path = Path(script_name)
        if script_path.exists():
            optimize_analysis_script(script_path)
        else:
            print(f"‚ö†Ô∏è  Script {script_name} introuvable")

def optimize_analysis_script(script_path):
    """Optimise un script d'analyse sp√©cifique."""
    print(f"   üîß Optimisation de {script_path.name}...")
    
    # Sauvegarder l'original
    backup_path = script_path.with_suffix('.py.backup')
    if not backup_path.exists():
        shutil.copy2(script_path, backup_path)
    
    # Lire le script
    with open(script_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Ajouter les optimisations si pas d√©j√† pr√©sentes
    if "torch.set_num_threads(14)" not in content:
        # Ajouter les imports et optimisations
        import_section = """import warnings
import torch
import os

# Optimisations M4 pour l'analyse
if torch.backends.mps.is_available():
    torch.set_num_threads(14)
    os.environ['OMP_NUM_THREADS'] = '14'
    os.environ['MKL_NUM_THREADS'] = '14'
    os.environ['NUMEXPR_NUM_THREADS'] = '14'

"""
        
        # Trouver la premi√®re ligne d'import
        lines = content.split('\n')
        import_index = 0
        for i, line in enumerate(lines):
            if line.strip().startswith('import ') or line.strip().startswith('from '):
                import_index = i
                break
        
        # Ins√©rer les optimisations
        lines.insert(import_index, import_section.strip())
        content = '\n'.join(lines)
        
        # Sauvegarder
        with open(script_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print(f"   ‚úÖ {script_path.name} optimis√©")

def create_optimized_rag_script():
    """Cr√©e une version optimis√©e du script RAG principal."""
    print("\nüìù Cr√©ation d'une version optimis√©e...")
    
    # Lire le script original
    original_path = Path("advanced_rag_transcription.py")
    if not original_path.exists():
        print("‚ùå Script original introuvable")
        return
    
    with open(original_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Cr√©er la version optimis√©e
    optimized_content = f"""#!/usr/bin/env python3
# Version optimis√©e pour Mac M4
# G√©n√©r√©e automatiquement par optimize_rag_for_m4.py

import warnings
import torch
import os

# Optimisations M4 - D√âBUT
if torch.backends.mps.is_available():
    torch.set_num_threads(14)
    os.environ['OMP_NUM_THREADS'] = '14'
    os.environ['MKL_NUM_THREADS'] = '14'
    os.environ['NUMEXPR_NUM_THREADS'] = '14'
    print("üöÄ Optimisations Mac M4 activ√©es")
else:
    print("‚ö†Ô∏è  MPS non disponible - Utilisation CPU uniquement")
# Optimisations M4 - FIN

{content}
"""
    
    # Sauvegarder
    optimized_path = Path("advanced_rag_transcription_m4_optimized.py")
    with open(optimized_path, 'w', encoding='utf-8') as f:
        f.write(optimized_content)
    
    print(f"‚úÖ Version optimis√©e cr√©√©e: {optimized_path}")

def test_optimizations():
    """Teste les optimisations."""
    print("\nüß™ Test des optimisations...")
    
    try:
        # Test MPS
        if torch.backends.mps.is_available():
            device = torch.device("mps")
            x = torch.randn(100, 100).to(device)
            y = torch.randn(100, 100).to(device)
            z = torch.mm(x, y)
            print("‚úÖ Test MPS r√©ussi")
        
        # Test configuration
        print(f"‚úÖ Threads CPU: {torch.get_num_threads()}")
        print(f"‚úÖ Variables d'environnement configur√©es")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        return False

def main():
    """Fonction principale."""
    print("üöÄ Optimisation des scripts RAG pour Mac M4")
    print("=" * 60)
    
    try:
        # Optimiser les scripts
        success = optimize_rag_scripts()
        
        if success:
            # Cr√©er la version optimis√©e
            create_optimized_rag_script()
            
            # Tester les optimisations
            test_optimizations()
            
            print("\nüéâ Optimisation termin√©e avec succ√®s!")
            print("\nüìã R√©sum√© des optimisations:")
            print("   ‚úÖ MPS activ√© pour l'acc√©l√©ration GPU")
            print("   ‚úÖ Mixed precision activ√©")
            print("   ‚úÖ 14 threads CPU utilis√©s")
            print("   ‚úÖ Variables d'environnement optimis√©es")
            print("   ‚úÖ Scripts sauvegard√©s et optimis√©s")
            
            print("\nüöÄ Utilisation:")
            print("   python advanced_rag_transcription_m4_optimized.py audio.mp3")
            print("   # ou utilisez les scripts existants (d√©j√† optimis√©s)")
            
        else:
            print("‚ùå Optimisation √©chou√©e")
            return 1
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())
