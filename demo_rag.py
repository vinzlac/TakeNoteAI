#!/usr/bin/env python3
"""
D√©monstration simple des fonctionnalit√©s RAG avanc√©es
"""

import sys
from pathlib import Path

def demo_keyword_extraction():
    """D√©monstration de l'extraction de mots-cl√©s m√©tiers."""
    print("üîç D√©monstration: Extraction de mots-cl√©s m√©tiers")
    print("=" * 50)
    
    # Texte d'exemple (transcription d'une r√©union)
    sample_text = """
    Bonjour, nous allons discuter de l'architecture du projet. 
    L'√©quipe de d√©veloppement a termin√© la phase de code review. 
    Nous devons maintenant proc√©der au d√©ploiement en production. 
    La maintenance du syst√®me sera assur√©e par l'√©quipe support. 
    Les tests d'int√©gration sont en cours de validation.
    """
    
    try:
        from keybert import KeyBERT
        from sentence_transformers import SentenceTransformer
        
        # Initialiser KeyBERT
        model = SentenceTransformer('sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2')
        kw_model = KeyBERT(model=model)
        
        # Extraire les mots-cl√©s
        keywords = kw_model.extract_keywords(
            sample_text,
            keyphrase_ngram_range=(1, 3),
            stop_words='french',
            top_n=10,
            use_mmr=True,
            diversity=0.5
        )
        
        print("üìù Texte analys√©:")
        print(f"   {sample_text.strip()}")
        print()
        print("üîë Mots-cl√©s m√©tiers extraits:")
        for i, (keyword, score) in enumerate(keywords, 1):
            print(f"   {i}. {keyword} (score: {score:.3f})")
        
        return True
        
    except ImportError:
        print("‚ùå KeyBERT non install√©. Installez avec: pip install keybert")
        return False
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def demo_embeddings():
    """D√©monstration des embeddings s√©mantiques."""
    print("\nüß† D√©monstration: Embeddings s√©mantiques")
    print("=" * 50)
    
    texts = [
        "Architecture du syst√®me et d√©veloppement",
        "Code review et tests d'int√©gration", 
        "D√©ploiement en production et maintenance"
    ]
    
    try:
        from sentence_transformers import SentenceTransformer
        import numpy as np
        
        # Initialiser le mod√®le
        model = SentenceTransformer('sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2')
        
        # G√©n√©rer les embeddings
        embeddings = model.encode(texts)
        
        print("üìù Textes analys√©s:")
        for i, text in enumerate(texts, 1):
            print(f"   {i}. {text}")
        print()
        print("üß† Embeddings g√©n√©r√©s:")
        print(f"   - Nombre de textes: {len(texts)}")
        print(f"   - Dimension des embeddings: {embeddings.shape[1]}")
        print(f"   - Type: {embeddings.dtype}")
        
        # Calculer les similarit√©s
        from sklearn.metrics.pairwise import cosine_similarity
        similarities = cosine_similarity(embeddings)
        
        print("\nüîó Similarit√©s entre les textes:")
        for i in range(len(texts)):
            for j in range(i+1, len(texts)):
                sim = similarities[i][j]
                print(f"   - Texte {i+1} ‚Üî Texte {j+1}: {sim:.3f}")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå D√©pendance manquante: {e}")
        print("üí° Installez avec: pip install sentence-transformers scikit-learn")
        return False
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def demo_vector_db():
    """D√©monstration de la base de donn√©es vectorielle."""
    print("\nüíæ D√©monstration: Base de donn√©es vectorielle")
    print("=" * 50)
    
    try:
        import chromadb
        from chromadb.config import Settings
        from sentence_transformers import SentenceTransformer
        
        # Initialiser ChromaDB (nouvelle configuration)
        client = chromadb.PersistentClient(path="./demo_chroma_db")
        
        # Cr√©er une collection
        try:
            collection = client.get_collection("demo_documents")
        except:
            collection = client.create_collection("demo_documents")
        
        # Mod√®le d'embeddings
        model = SentenceTransformer('sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2')
        
        # Documents d'exemple
        documents = [
            "Architecture microservices et d√©ploiement Docker",
            "Tests unitaires et int√©gration continue",
            "Monitoring et alertes syst√®me en production"
        ]
        
        # G√©n√©rer les embeddings
        embeddings = model.encode(documents)
        
        # Ajouter √† la base
        collection.add(
            documents=documents,
            embeddings=embeddings.tolist(),
            metadatas=[
                {"type": "architecture", "priority": "high"},
                {"type": "testing", "priority": "medium"},
                {"type": "monitoring", "priority": "high"}
            ],
            ids=["doc1", "doc2", "doc3"]
        )
        
        print("üìù Documents stock√©s:")
        for i, doc in enumerate(documents, 1):
            print(f"   {i}. {doc}")
        
        # Recherche
        query = "d√©ploiement et production"
        query_embedding = model.encode([query])
        
        results = collection.query(
            query_embeddings=query_embedding.tolist(),
            n_results=2
        )
        
        print(f"\nüîç Recherche: '{query}'")
        print("üìã R√©sultats:")
        for i, (doc, metadata, distance) in enumerate(zip(
            results['documents'][0], 
            results['metadatas'][0], 
            results['distances'][0]
        ), 1):
            print(f"   {i}. {doc}")
            print(f"      M√©tadonn√©es: {metadata}")
            print(f"      Distance: {distance:.3f}")
        
        # Nettoyer
        import shutil
        shutil.rmtree("./demo_chroma_db", ignore_errors=True)
        
        return True
        
    except ImportError as e:
        print(f"‚ùå D√©pendance manquante: {e}")
        print("üí° Installez avec: pip install chromadb sentence-transformers")
        return False
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def main():
    """Fonction principale de d√©monstration."""
    print("üéØ D√©monstration des fonctionnalit√©s RAG avanc√©es")
    print("=" * 60)
    
    success_count = 0
    total_demos = 3
    
    # D√©monstration 1: Extraction de mots-cl√©s
    if demo_keyword_extraction():
        success_count += 1
    
    # D√©monstration 2: Embeddings
    if demo_embeddings():
        success_count += 1
    
    # D√©monstration 3: Base vectorielle
    if demo_vector_db():
        success_count += 1
    
    # R√©sum√©
    print(f"\nüìä R√©sum√© de la d√©monstration:")
    print(f"   - D√©monstrations r√©ussies: {success_count}/{total_demos}")
    
    if success_count == total_demos:
        print("üéâ Toutes les fonctionnalit√©s RAG sont op√©rationnelles!")
        print("\nüöÄ Pour utiliser avec vos fichiers audio:")
        print("   python advanced_rag_transcription.py votre_audio.mp3")
    else:
        print("‚ö†Ô∏è  Certaines fonctionnalit√©s n√©cessitent une installation.")
        print("\nüí° Pour installer toutes les d√©pendances:")
        print("   ./install_advanced.sh")
    
    print(f"\nüìã Scripts disponibles:")
    print(f"   - advanced_rag_transcription.py : Script principal")
    print(f"   - install_advanced.sh : Installation des d√©pendances")
    print(f"   - demo_rag.py : Cette d√©monstration")

if __name__ == "__main__":
    main()
