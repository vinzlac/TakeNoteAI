#!/usr/bin/env python3
"""
Script g√©n√©rique pour t√©l√©charger n'importe quel mod√®le Whisper
Usage: python download_whisper_model.py <model_name>
"""

import whisper
import sys
import argparse
from pathlib import Path

# Mod√®les Whisper disponibles avec leurs informations
WHISPER_MODELS = {
    "tiny": {
        "size": "~39 MB",
        "description": "Tr√®s rapide, qualit√© basique",
        "use_case": "Tests rapides, ressources limit√©es"
    },
    "base": {
        "size": "~74 MB", 
        "description": "Rapide, qualit√© correcte",
        "use_case": "Usage g√©n√©ral, √©quilibre vitesse/qualit√©"
    },
    "small": {
        "size": "~244 MB",
        "description": "Mod√©r√©, bonne qualit√©",
        "use_case": "Usage professionnel l√©ger"
    },
    "medium": {
        "size": "~769 MB",
        "description": "Bon √©quilibre vitesse/qualit√©",
        "use_case": "Usage professionnel standard"
    },
    "large": {
        "size": "~1550 MB",
        "description": "Meilleure qualit√©, plus lent",
        "use_case": "Usage professionnel haute qualit√©"
    }
}

def list_available_models():
    """Affiche la liste des mod√®les Whisper disponibles avec leurs informations."""
    print("üìã Mod√®les Whisper disponibles:")
    print("=" * 80)
    
    for model_name, info in WHISPER_MODELS.items():
        print(f"üé§ {model_name.upper():<8} | {info['size']:<12} | {info['description']}")
        print(f"   üí° Usage: {info['use_case']}")
        print()

def download_whisper_model(model_name):
    """
    T√©l√©charge un mod√®le Whisper sp√©cifique.
    
    Args:
        model_name (str): Nom du mod√®le √† t√©l√©charger
        
    Returns:
        bool: True si le t√©l√©chargement a r√©ussi, False sinon
    """
    if model_name not in WHISPER_MODELS:
        print(f"‚ùå Erreur: Le mod√®le '{model_name}' n'existe pas.")
        print(f"üìã Mod√®les disponibles: {', '.join(WHISPER_MODELS.keys())}")
        return False
    
    model_info = WHISPER_MODELS[model_name]
    
    print(f"üé§ TakeNote AI - T√©l√©chargement du mod√®le Whisper '{model_name}'")
    print("=" * 70)
    print(f"üìä Informations du mod√®le:")
    print(f"   - Taille: {model_info['size']}")
    print(f"   - Description: {model_info['description']}")
    print(f"   - Usage recommand√©: {model_info['use_case']}")
    print()
    
    try:
        print(f"üîÑ T√©l√©chargement du mod√®le '{model_name}' en cours...")
        print("   (Cela peut prendre plusieurs minutes selon votre connexion)")
        print()
        
        # Forcer le t√©l√©chargement du mod√®le
        model = whisper.load_model(model_name)
        
        print(f"‚úÖ Mod√®le '{model_name}' t√©l√©charg√© avec succ√®s!")
        print(f"üìÅ Emplacement: {Path.home()}/.cache/whisper/")
        print()
        
        # Afficher les informations techniques du mod√®le
        print(f"üìä Informations techniques:")
        print(f"   - Dimensions: {model.dims}")
        print(f"   - Taille r√©elle: {model_info['size']}")
        print()
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du t√©l√©chargement: {e}")
        return False

def main():
    """Fonction principale."""
    parser = argparse.ArgumentParser(
        description="T√©l√©charge un mod√®le Whisper sp√©cifique",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemples d'utilisation:
  %(prog)s tiny                    # T√©l√©charge le mod√®le tiny
  %(prog)s base                    # T√©l√©charge le mod√®le base  
  %(prog)s small                   # T√©l√©charge le mod√®le small
  %(prog)s medium                  # T√©l√©charge le mod√®le medium
  %(prog)s large                   # T√©l√©charge le mod√®le large
  %(prog)s --list                  # Liste tous les mod√®les disponibles
        """
    )
    
    parser.add_argument(
        "model", 
        nargs="?", 
        help="Nom du mod√®le √† t√©l√©charger (tiny, base, small, medium, large)"
    )
    parser.add_argument(
        "--list", 
        action="store_true", 
        help="Afficher la liste des mod√®les disponibles"
    )
    
    args = parser.parse_args()
    
    # Si --list est sp√©cifi√©, afficher la liste et quitter
    if args.list:
        list_available_models()
        return
    
    # Si aucun mod√®le n'est sp√©cifi√©, afficher l'aide
    if not args.model:
        parser.print_help()
        print("\nüí° Utilisez --list pour voir tous les mod√®les disponibles")
        sys.exit(1)
    
    # T√©l√©charger le mod√®le sp√©cifi√©
    success = download_whisper_model(args.model.lower())
    
    if success:
        print("üéâ T√©l√©chargement termin√©!")
        print(f"üí° Vous pouvez maintenant utiliser le mod√®le '{args.model}' avec:")
        print(f"   python takenote.py votre_audio.mp3 -m {args.model}")
        print(f"   python audio_transcriber.py votre_audio.mp3 -m {args.model}")
    else:
        print("üí• √âchec du t√©l√©chargement")
        sys.exit(1)

if __name__ == "__main__":
    main()
