#!/usr/bin/env python3
"""
Script principal pour poser des questions sur un fichier audio
Usage simple et intuitif
"""

import sys
import os
from pathlib import Path

def find_json_files():
    """Trouve les fichiers JSON de transcription disponibles."""
    json_files = list(Path(".").glob("*advanced_rag*.json"))
    return json_files

def main():
    """Fonction principale interactive."""
    print("üé§ Analyseur de Questions Audio")
    print("=" * 50)
    
    # Trouver les fichiers JSON disponibles
    json_files = find_json_files()
    
    if not json_files:
        print("‚ùå Aucun fichier JSON de transcription trouv√©.")
        print("üí° Utilisez d'abord : python advanced_rag_transcription.py votre_audio.mp3")
        return 1
    
    # Afficher les fichiers disponibles
    print("üìÅ Fichiers de transcription disponibles :")
    for i, file in enumerate(json_files, 1):
        print(f"   {i}. {file.name}")
    
    # S√©lection du fichier
    if len(json_files) == 1:
        selected_file = json_files[0]
        print(f"\n‚úÖ Fichier s√©lectionn√© automatiquement : {selected_file.name}")
    else:
        try:
            choice = int(input(f"\nüî¢ Choisissez un fichier (1-{len(json_files)}) : "))
            if 1 <= choice <= len(json_files):
                selected_file = json_files[choice - 1]
            else:
                print("‚ùå Choix invalide")
                return 1
        except ValueError:
            print("‚ùå Veuillez entrer un nombre valide")
            return 1
    
    print(f"\nüìã Fichier analys√© : {selected_file.name}")
    
    # Questions pr√©d√©finies
    predefined_questions = [
        "Quels risques sont identifi√©s ?",
        "Quelles actions doivent √™tre prises ?",
        "Qui fait partie de l'√©quipe ?",
        "Quels sont les d√©lais et √©ch√©ances ?",
        "Quel est l'√©tat de l'architecture ?",
        "Quels standards sont mentionn√©s ?"
    ]
    
    print("\nüéØ Questions pr√©d√©finies disponibles :")
    for i, question in enumerate(predefined_questions, 1):
        print(f"   {i}. {question}")
    
    print("\nüí° Ou tapez votre propre question")
    
    while True:
        print("\n" + "="*50)
        choice = input("üî¢ Choisissez une question (1-6) ou tapez votre question : ").strip()
        
        if choice.isdigit() and 1 <= int(choice) <= len(predefined_questions):
            question = predefined_questions[int(choice) - 1]
        elif choice.lower() in ['quit', 'exit', 'q', '']:
            print("üëã Au revoir !")
            break
        else:
            question = choice
        
        # Ex√©cuter l'analyse
        print(f"\nüîç Analyse de : \"{question}\"")
        print("-" * 50)
        
        try:
            import subprocess
            result = subprocess.run([
                sys.executable, "simple_audio_analyzer.py", 
                str(selected_file), "--question", question
            ], capture_output=False, text=True, encoding='utf-8')
            
            if result.returncode != 0:
                print("‚ùå Erreur lors de l'analyse")
        
        except Exception as e:
            print(f"‚ùå Erreur : {e}")
        
        # Proposer de continuer
        continue_choice = input("\n‚ùì Voulez-vous poser une autre question ? (o/n) : ").strip().lower()
        if continue_choice not in ['o', 'oui', 'y', 'yes']:
            print("üëã Au revoir !")
            break
    
    return 0

if __name__ == "__main__":
    try:
        exit(main())
    except KeyboardInterrupt:
        print("\n\nüëã Interruption par l'utilisateur. Au revoir !")
        exit(0)
