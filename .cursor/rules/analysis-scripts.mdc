---
description: Analysis and summarization script usage
---

# Analysis and Summarization Scripts

## Core Analysis Scripts

### Question Answering
- [simple_audio_analyzer.py](mdc:simple_audio_analyzer.py) - Main Q&A engine
- [ask_audio.py](mdc:ask_audio.py) - Interactive question interface
- [demo_questions.py](mdc:demo_questions.py) - Predefined question demonstrations

### Summarization
- [audio_summarizer.py](mdc:audio_summarizer.py) - Multi-format summary generation
- [resume_audio.py](mdc:resume_audio.py) - Interactive summary interface
- [show_summary.py](mdc:show_summary.py) - Terminal-only summary display

## Analysis Categories

### Predefined Question Categories
```python
RISK_KEYWORDS = ["risque", "probl√®me", "danger", "critique", "urgent", "bloquant"]
ACTION_KEYWORDS = ["action", "t√¢che", "faire", "impl√©menter", "d√©velopper", "mettre en place"]
TEAM_KEYWORDS = ["√©quipe", "personne", "responsable", "Vincent", "Malek", "Zven", "Mako"]
DEADLINE_KEYWORDS = ["date", "√©ch√©ance", "deadline", "fin", "milestone", "sprint"]
ARCHITECTURE_KEYWORDS = ["architecture", "syst√®me", "infrastructure", "Azure", "Microsoft"]
STANDARDS_KEYWORDS = ["standard", "norme", "r√®gle", "convention", "bonne pratique"]
```

### Summary Types
1. **Executive** (`executif`): High-level overview, key decisions, risks
2. **Business** (`business`): Business impact, stakeholders, deadlines
3. **Detailed** (`detaille`): Technical details, implementation, architecture

## Usage Patterns

### Direct Analysis
```bash
python simple_audio_analyzer.py transcription.json "Quels risques sont identifi√©s ?"
```

### Interactive Analysis
```bash
python ask_audio.py  # Interactive file selection and questioning
```

### Batch Analysis
```bash
python demo_questions.py  # Runs predefined questions
```

### Summary Generation
```bash
python audio_summarizer.py transcription.json --type executif
python audio_summarizer.py transcription.json --type business
python audio_summarizer.py transcription.json --type detaille
python audio_summarizer.py transcription.json --type all  # All types
```

## Output Formats

### Question Answering Output
```
üéØ Question: Quels risques sont identifi√©s ?

üìä R√©ponse bas√©e sur l'analyse de la transcription:

üïê 00:00:04 - 00:00:08
"il y a un risque parce qu'il y a une d√©pendance"
Mots-cl√©s d√©tect√©s: risque, d√©pendance

üïê 00:00:15 - 00:00:19  
"le risque c'est qu'on va perdre du temps"
Mots-cl√©s d√©tect√©s: risque, temps
```

### Summary Output
```
üìã R√âSUM√â EX√âCUTIF
==================

üéØ Objectif: Migration vers Azure avec JIT

‚ö†Ô∏è Risques identifi√©s:
- D√©pendance critique avec JIT
- Perte de temps potentielle
- Complexit√© de la migration

üöÄ Actions prioritaires:
- Coordination avec JIT
- Planification des √©ch√©ances
- Mise en place des √©quipes

üìÖ √âch√©ances:
- Sprint 1: Analyse technique
- Sprint 2: D√©veloppement
- Sprint 3: Tests et d√©ploiement
```

## Integration with Workflows

### In Complete Workflows
Analysis and summarization are automatically triggered in:
- [rag_complete_workflow.py](mdc:rag_complete_workflow.py)
- [rag_ultra_simple.py](mdc:rag_ultra_simple.py)

### Standalone Usage
All analysis scripts can be used independently with existing JSON transcriptions.

## Performance Considerations

### For Large Transcriptions
- Analysis time scales linearly with text length
- Memory usage is minimal (text-based processing)
- No GPU requirements for analysis scripts

### Optimization Tips
- Use targeted questions instead of full analysis when possible
- Cache frequently asked questions
- Batch multiple questions in single script execution
- Use appropriate summary type for intended audience