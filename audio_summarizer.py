#!/usr/bin/env python3
"""
Script pour g√©n√©rer des r√©sum√©s complets de fichiers audio transcrits
"""

import warnings
import torch
import os

# Optimisations M4 pour l'analyse
if torch.backends.mps.is_available():
    torch.set_num_threads(14)
    os.environ['OMP_NUM_THREADS'] = '14'
    os.environ['MKL_NUM_THREADS'] = '14'
    os.environ['NUMEXPR_NUM_THREADS'] = '14'
import json
import argparse
from pathlib import Path
from datetime import datetime
import re

# Import du gestionnaire de sortie
try:
    from output_manager import OutputManager
    OUTPUT_MANAGER = OutputManager()
except ImportError:
    print("‚ö†Ô∏è  output_manager.py non trouv√©, utilisation des chemins par d√©faut")
    OUTPUT_MANAGER = None

class AudioSummarizer:
    """G√©n√©rateur de r√©sum√©s pour les transcriptions audio."""
    
    def __init__(self, json_file: str):
        """Initialise le r√©sumeur avec un fichier JSON."""
        self.json_file = Path(json_file)
        if not self.json_file.exists():
            raise FileNotFoundError(f"Le fichier {json_file} n'existe pas")
        
        with open(self.json_file, 'r', encoding='utf-8') as f:
            self.data = json.load(f)
        
        self.full_text = self.data["transcription"]["text"]
        self.segments = self.data["transcription"].get("segments", [])
        self.metadata = self.data.get("metadata", {})
        
        print(f"‚úÖ Fichier charg√©: {len(self.full_text)} caract√®res, {len(self.segments)} segments")
    
    def extract_key_information(self):
        """Extrait les informations cl√©s de l'audio."""
        info = {
            "duration": self._calculate_duration(),
            "speaker_role": self._identify_speaker_role(),
            "project_scope": self._extract_project_scope(),
            "team_size": self._extract_team_info(),
            "main_topics": self._extract_main_topics(),
            "timeline": self._extract_timeline(),
            "risks": self._extract_risks(),
            "actions": self._extract_actions(),
            "decisions": self._extract_decisions()
        }
        return info
    
    def _calculate_duration(self):
        """Calcule la dur√©e totale de l'audio."""
        if self.segments:
            last_segment = max(self.segments, key=lambda x: x.get("end", 0))
            return round(last_segment.get("end", 0), 1)
        return 0
    
    def _identify_speaker_role(self):
        """Identifie le r√¥le du locuteur principal."""
        text_lower = self.full_text.lower()
        
        if "responsable" in text_lower and "d√©velopper" in text_lower:
            return "Responsable de d√©veloppement"
        elif "g√©rer" in text_lower and "applications" in text_lower:
            return "Manager de projet"
        elif "architecture" in text_lower:
            return "Architecte technique"
        else:
            return "Participant √† la r√©union"
    
    def _extract_project_scope(self):
        """Extrait la port√©e du projet."""
        scope_info = {}
        
        for segment in self.segments:
            text = segment.get("text", "")
            
            if "150 applications" in text:
                scope_info["applications_count"] = 150
            if "70 personnes" in text:
                scope_info["team_size"] = 70
            if "go-live" in text.lower():
                scope_info["has_go_live"] = True
            if "architecture" in text.lower():
                scope_info["involves_architecture"] = True
        
        return scope_info
    
    def _extract_team_info(self):
        """Extrait les informations sur l'√©quipe."""
        team_info = {}
        
        for segment in self.segments:
            text = segment.get("text", "")
            text_lower = text.lower()
            
            if "d√©veloppeurs" in text_lower:
                team_info["has_developers"] = True
            if "architectes" in text_lower:
                team_info["has_architects"] = True
            if "services de projets" in text_lower:
                team_info["has_project_services"] = True
            if "70 personnes" in text:
                team_info["total_team_size"] = 70
        
        return team_info
    
    def _extract_main_topics(self):
        """Extrait les sujets principaux discut√©s."""
        topics = []
        
        # Sujets identifi√©s par mots-cl√©s
        topic_keywords = {
            "Architecture": ["architecture", "design", "structure"],
            "Code Review": ["code review", "review", "validation"],
            "Standards": ["standards", "conformit√©", "respecter"],
            "Go-live": ["go-live", "production", "d√©ploiement"],
            "Maintenance": ["maintenance", "support", "entretien"],
            "D√©veloppement": ["d√©velopper", "d√©veloppement", "applications"],
            "√âquipe": ["√©quipe", "personnes", "responsable"]
        }
        
        for topic, keywords in topic_keywords.items():
            for segment in self.segments:
                text_lower = segment.get("text", "").lower()
                if any(keyword in text_lower for keyword in keywords):
                    if topic not in topics:
                        topics.append(topic)
                    break
        
        return topics
    
    def _extract_timeline(self):
        """Extrait les informations temporelles."""
        timeline = []
        
        for segment in self.segments:
            text = segment.get("text", "")
            text_lower = text.lower()
            timestamp = segment.get("start", 0)
            
            if "go-live" in text_lower:
                timeline.append({
                    "event": "Go-live mentionn√©",
                    "description": text.strip(),
                    "timestamp": f"{timestamp:.1f}s"
                })
            elif "maintenant" in text_lower:
                timeline.append({
                    "event": "Situation actuelle",
                    "description": text.strip(),
                    "timestamp": f"{timestamp:.1f}s"
                })
            elif "apr√®s" in text_lower and "go-live" in text_lower:
                timeline.append({
                    "event": "Post go-live",
                    "description": text.strip(),
                    "timestamp": f"{timestamp:.1f}s"
                })
        
        return timeline
    
    def _extract_risks(self):
        """Extrait les risques identifi√©s."""
        risks = []
        
        for segment in self.segments:
            text = segment.get("text", "")
            text_lower = text.lower()
            
            if any(word in text_lower for word in ["changement", "modification"]):
                risks.append({
                    "type": "Risque de changement",
                    "description": text.strip(),
                    "severity": "Moyen"
                })
            elif any(word in text_lower for word in ["standard", "conformit√©"]):
                risks.append({
                    "type": "Risque de non-conformit√©",
                    "description": text.strip(),
                    "severity": "√âlev√©"
                })
            elif "go-live" in text_lower:
                risks.append({
                    "type": "Risque de d√©ploiement",
                    "description": text.strip(),
                    "severity": "√âlev√©"
                })
        
        return risks
    
    def _extract_actions(self):
        """Extrait les actions identifi√©es."""
        actions = []
        
        for segment in self.segments:
            text = segment.get("text", "")
            text_lower = text.lower()
            
            if any(word in text_lower for word in ["d√©velopper", "cr√©er", "faire"]):
                actions.append({
                    "type": "D√©veloppement",
                    "description": text.strip(),
                    "priority": "Haute"
                })
            elif any(word in text_lower for word in ["valider", "review", "v√©rifier"]):
                actions.append({
                    "type": "Validation",
                    "description": text.strip(),
                    "priority": "Critique"
                })
        
        return actions
    
    def _extract_decisions(self):
        """Extrait les d√©cisions prises."""
        decisions = []
        
        for segment in self.segments:
            text = segment.get("text", "")
            text_lower = text.lower()
            
            # Mots-cl√©s indiquant une d√©cision
            decision_indicators = ["doit passer", "n√©cessaire", "important", "critique"]
            
            if any(indicator in text_lower for indicator in decision_indicators):
                decisions.append({
                    "description": text.strip(),
                    "type": "D√©cision technique"
                })
        
        return decisions
    
    def generate_executive_summary(self):
        """G√©n√®re un r√©sum√© ex√©cutif."""
        info = self.extract_key_information()
        
        summary = f"""# üìä R√âSUM√â EX√âCUTIF - {self.metadata.get('filename', 'Audio')}

## üéØ Contexte g√©n√©ral
- **Dur√©e** : {info['duration']} secondes
- **R√¥le du locuteur** : {info['speaker_role']}
- **Sujets principaux** : {', '.join(info['main_topics'])}

## üìà Port√©e du projet
"""
        
        if info['project_scope']:
            if 'applications_count' in info['project_scope']:
                summary += f"- **Applications** : {info['project_scope']['applications_count']}\n"
            if 'team_size' in info['project_scope']:
                summary += f"- **√âquipe** : {info['project_scope']['team_size']} personnes\n"
            if info['project_scope'].get('has_go_live'):
                summary += "- **Go-live pr√©vu** : Oui\n"
        
        summary += f"""
## ‚ö†Ô∏è Risques identifi√©s ({len(info['risks'])})
"""
        
        for i, risk in enumerate(info['risks'][:5], 1):
            summary += f"{i}. **{risk['type']}** - {risk['severity']}\n"
            summary += f"   *{risk['description'][:80]}...*\n\n"
        
        summary += f"""
## üéØ Actions prioritaires ({len(info['actions'])})
"""
        
        for i, action in enumerate(info['actions'][:5], 1):
            summary += f"{i}. **{action['type']}** - {action['priority']}\n"
            summary += f"   *{action['description'][:80]}...*\n\n"
        
        summary += f"""
## üìÖ √âch√©ances cl√©s
"""
        
        for event in info['timeline'][:3]:
            summary += f"- **{event['event']}** : {event['timestamp']}\n"
            summary += f"  *{event['description'][:60]}...*\n\n"
        
        summary += f"""
## üèÜ Points cl√©s √† retenir
1. **Projet d'envergure** : Gestion de {info['project_scope'].get('applications_count', 'plusieurs')} applications
2. **√âquipe importante** : {info['project_scope'].get('team_size', 'plusieurs')} personnes impliqu√©es
3. **Go-live critique** : Point focal de toutes les activit√©s
4. **Standards √† respecter** : Conformit√© et validation essentielles
5. **Architecture stabilis√©e** : Phase de finalisation en cours
"""
        
        return summary
    
    def generate_detailed_summary(self):
        """G√©n√®re un r√©sum√© d√©taill√©."""
        info = self.extract_key_information()
        
        summary = f"""# üìã R√âSUM√â D√âTAILL√â - {self.metadata.get('filename', 'Audio')}

## üìä M√©tadonn√©es
- **Fichier** : {self.metadata.get('filename', 'Non sp√©cifi√©')}
- **Dur√©e** : {info['duration']} secondes
- **M√©thode de transcription** : {self.metadata.get('transcription_method', 'Non sp√©cifi√©e')}
- **Langue** : {self.metadata.get('language', 'Non sp√©cifi√©e')}
- **Date de traitement** : {self.metadata.get('timestamp', 'Non sp√©cifi√©e')}

## üë§ Profil du locuteur
- **R√¥le** : {info['speaker_role']}
- **Responsabilit√©s** : Gestion d'√©quipe et de projets de d√©veloppement

## üéØ Sujets abord√©s
"""
        
        for i, topic in enumerate(info['main_topics'], 1):
            summary += f"{i}. **{topic}**\n"
        
        summary += f"""

## üìà Port√©e et contexte du projet
"""
        
        if info['project_scope']:
            summary += "### D√©tails du projet :\n"
            for key, value in info['project_scope'].items():
                summary += f"- **{key.replace('_', ' ').title()}** : {value}\n"
        
        summary += f"""

### Composition de l'√©quipe :
"""
        
        if info['team_size']:
            for key, value in info['team_size'].items():
                summary += f"- **{key.replace('_', ' ').title()}** : {value}\n"
        
        summary += f"""

## ‚ö†Ô∏è Analyse des risques
**Total identifi√©** : {len(info['risks'])} risques

"""
        
        for i, risk in enumerate(info['risks'], 1):
            summary += f"### {i}. {risk['type']} (S√©v√©rit√©: {risk['severity']})\n"
            summary += f"**Description** : {risk['description']}\n\n"
        
        summary += f"""
## üéØ Actions et responsabilit√©s
**Total identifi√©** : {len(info['actions'])} actions

"""
        
        for i, action in enumerate(info['actions'], 1):
            summary += f"### {i}. {action['type']} (Priorit√©: {action['priority']})\n"
            summary += f"**Description** : {action['description']}\n\n"
        
        summary += f"""
## üìÖ Chronologie des √©v√©nements
"""
        
        for i, event in enumerate(info['timeline'], 1):
            summary += f"### {i}. {event['event']} ({event['timestamp']})\n"
            summary += f"**Description** : {event['description']}\n\n"
        
        summary += f"""
## üèÜ D√©cisions importantes
**Total identifi√©** : {len(info['decisions'])} d√©cisions

"""
        
        for i, decision in enumerate(info['decisions'], 1):
            summary += f"### {i}. {decision['type']}\n"
            summary += f"**Description** : {decision['description']}\n\n"
        
        summary += f"""
## üìù Transcription compl√®te
*Dur√©e totale : {info['duration']} secondes*

```
{self.full_text}
```

## üîç Segments d√©taill√©s
"""
        
        for i, segment in enumerate(self.segments[:10], 1):  # Limiter √† 10 segments
            start = segment.get('start', 0)
            end = segment.get('end', 0)
            text = segment.get('text', '').strip()
            summary += f"{i:2d}. [{start:6.1f}s - {end:6.1f}s] {text}\n"
        
        if len(self.segments) > 10:
            summary += f"\n... et {len(self.segments) - 10} segments suppl√©mentaires\n"
        
        summary += f"""

---
*R√©sum√© g√©n√©r√© automatiquement le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}*
"""
        
        return summary
    
    def generate_business_summary(self):
        """G√©n√®re un r√©sum√© orient√© business."""
        info = self.extract_key_information()
        
        summary = f"""# üíº R√âSUM√â BUSINESS - {self.metadata.get('filename', 'Audio')}

## üéØ Vue d'ensemble
Cette r√©union porte sur un **projet de grande envergure** impliquant :
- {info['project_scope'].get('applications_count', 'Plusieurs')} applications
- {info['project_scope'].get('team_size', 'Une √©quipe importante')} de personnes
- Un **go-live critique** √† venir

## üí∞ Impact business
- **Scope** : Projet majeur touchant de nombreux syst√®mes
- **Ressources** : √âquipe importante mobilis√©e
- **Timeline** : Go-live imminent avec pression temporelle
- **Risques** : Enjeux √©lev√©s de conformit√© et de d√©ploiement

## ‚ö° Actions prioritaires
"""
        
        high_priority_actions = [a for a in info['actions'] if a['priority'] in ['Haute', 'Critique']]
        
        for i, action in enumerate(high_priority_actions[:5], 1):
            summary += f"{i}. **{action['type']}** - {action['description'][:60]}...\n"
        
        summary += f"""

## üö® Risques critiques
"""
        
        high_risk = [r for r in info['risks'] if r['severity'] == '√âlev√©']
        
        for i, risk in enumerate(high_risk[:5], 1):
            summary += f"{i}. **{risk['type']}** - {risk['description'][:60]}...\n"
        
        summary += f"""

## üìä M√©triques cl√©s
- **Dur√©e de la r√©union** : {info['duration']} secondes
- **Sujets abord√©s** : {len(info['main_topics'])}
- **Risques identifi√©s** : {len(info['risks'])}
- **Actions d√©finies** : {len(info['actions'])}
- **D√©cisions prises** : {len(info['decisions'])}

## üéØ Recommandations
1. **Suivi rapproch√©** du go-live
2. **Validation stricte** des standards
3. **Coordination renforc√©e** entre les √©quipes
4. **Monitoring** des risques de changement
5. **Communication** sur les √©ch√©ances

---
*Analyse business g√©n√©r√©e le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}*
"""
        
        return summary


def main():
    """Fonction principale."""
    parser = argparse.ArgumentParser(
        description="G√©n√©rateur de r√©sum√©s pour les transcriptions audio",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemples d'utilisation:
  %(prog)s fichier.json --type executive
  %(prog)s fichier.json --type detailed --output resume_detaille.md
  %(prog)s fichier.json --type business --output analyse_business.md
  %(prog)s fichier.json --type all --output dossier_resumes/
        """
    )
    
    parser.add_argument("json_file", help="Fichier JSON de transcription")
    parser.add_argument("--type", "-t", 
                       choices=["executive", "detailed", "business", "all"],
                       default="executive",
                       help="Type de r√©sum√© √† g√©n√©rer")
    parser.add_argument("--output", "-o", help="Fichier ou dossier de sortie")
    
    args = parser.parse_args()
    
    try:
        # Initialiser le r√©sumeur
        summarizer = AudioSummarizer(args.json_file)
        
        # G√©n√©rer le(s) r√©sum√©(s)
        if args.type == "executive":
            summary = summarizer.generate_executive_summary()
            if args.output:
                output_file = args.output
            else:
                filename = "resume_executif.md"
                if OUTPUT_MANAGER:
                    output_file = str(OUTPUT_MANAGER.get_summary_path(filename))
                else:
                    output_file = filename
        elif args.type == "detailed":
            summary = summarizer.generate_detailed_summary()
            if args.output:
                output_file = args.output
            else:
                filename = "resume_detaille.md"
                if OUTPUT_MANAGER:
                    output_file = str(OUTPUT_MANAGER.get_summary_path(filename))
                else:
                    output_file = filename
        elif args.type == "business":
            summary = summarizer.generate_business_summary()
            if args.output:
                output_file = args.output
            else:
                filename = "resume_business.md"
                if OUTPUT_MANAGER:
                    output_file = str(OUTPUT_MANAGER.get_summary_path(filename))
                else:
                    output_file = filename
        elif args.type == "all":
            # G√©n√©rer tous les types
            if args.output:
                output_dir = Path(args.output)
            else:
                output_dir = OUTPUT_MANAGER.base_output_dir / "summaries" if OUTPUT_MANAGER else Path("resumes")
            output_dir.mkdir(exist_ok=True)
            
            summaries = {
                "executive": summarizer.generate_executive_summary(),
                "detailed": summarizer.generate_detailed_summary(),
                "business": summarizer.generate_business_summary()
            }
            
            for summary_type, content in summaries.items():
                output_file = output_dir / f"resume_{summary_type}.md"
                with open(output_file, 'w', encoding='utf-8') as f:
                    f.write(content)
                print(f"‚úÖ R√©sum√© {summary_type} sauvegard√© : {output_file}")
                
                # Afficher aussi dans la sortie standard
                print("\n" + "="*80)
                print(f"üìä R√âSUM√â {summary_type.upper()} - AFFICHAGE")
                print("="*80)
                print(content)
            
            print(f"\nüéâ Tous les r√©sum√©s g√©n√©r√©s dans : {output_dir}")
            return 0
        
        # Sauvegarder ou afficher
        if args.output or args.type != "all":
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(summary)
            print(f"‚úÖ R√©sum√© {args.type} sauvegard√© : {output_file}")
            
            # Afficher aussi dans la sortie standard
            print("\n" + "="*80)
            print(f"üìä R√âSUM√â {args.type.upper()} - AFFICHAGE")
            print("="*80)
            print(summary)
        else:
            print(summary)
        
    except Exception as e:
        print(f"‚ùå Erreur : {e}")
        return 1
    
    return 0


if __name__ == "__main__":
    exit(main())
